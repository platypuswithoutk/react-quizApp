{"version":3,"sources":["Progress.js","Question.js","Answer.js","Answers.js","App.js","serviceWorker.js","index.js"],"names":["Progress","props","currentQuestion","total","Question","question","Answer","classes","selected","push","value","letter","className","join","onClick","handleClick","answer","Answers","answer_a","currentAnswer","answer_b","answer_c","answer_d","App","useState","setCurrentQuestion","setAnswer","answers","setAnswers","error","setError","showResults","setResults","questions","id","correct_answer","map","find","questionId","key","renderUserAnswer","length","renderError","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1edba257.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Progress(props) {\r\n\r\n    return(\r\n        <h3>Question {props.currentQuestion} of {props.total}</h3>\r\n    )\r\n}\r\n\r\n\r\nexport default Progress;","import React from 'react';\r\n\r\nfunction Question(props) {\r\n    return(\r\n    <h2>{props.question}</h2>\r\n    )\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\n\r\nfunction Answer(props) {\r\n\r\n    let classes = ['answer']\r\n    if (props.selected) {\r\n        classes.push('selected');\r\n    }\r\n    return(\r\n    <button value={props.letter} className={classes.join(' ')} \r\n        onClick={props.handleClick}>\r\n        <span className=\"letter\">{props.letter}</span>\r\n        {props.answer}\r\n    </button>\r\n    );\r\n}\r\n\r\nexport default Answer;","import React from 'react';\r\nimport Answer from './Answer';\r\n\r\nfunction Answers(props) {\r\n    return(\r\n        <>\r\n            <Answer letter=\"a\" \r\n                answer={props.question.answer_a} \r\n                handleClick={props.handleClick}\r\n                selected={props.currentAnswer === 'a'}\r\n            />\r\n            <Answer letter=\"b\" \r\n                answer={props.question.answer_b} \r\n                handleClick={props.handleClick}\r\n                selected={props.currentAnswer === 'b'}\r\n            />\r\n            <Answer letter=\"c\"\r\n                answer={props.question.answer_c} \r\n                handleClick={props.handleClick}\r\n                selected={props.currentAnswer === 'c'}\r\n            />\r\n            <Answer letter=\"d\" \r\n                answer={props.question.answer_d} \r\n                handleClick={props.handleClick}\r\n                selected={props.currentAnswer === 'd'}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answers;","import React, {useState} from 'react';\nimport './App.css';\nimport Progress from './Progress';\nimport Question from './Question';\nimport Answers from './Answers';\n\n\nfunction App() {\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [currentAnswer, setAnswer] = useState('');\n  const [answers, setAnswers] = useState([]);\n  const [error, setError] = useState('');\n  const [showResults, setResults] = useState(false);\n  const questions = [\n    {\n      id: 1,\n      question: 'What is ReactJS?',\n      answer_a: 'Server side framework',\n      answer_b: 'User-interface framework',\n      answer_c: 'Library for building interaction interfaces',\n      answer_d: 'Library for building responsive website',\n      correct_answer: 'b'\n    },\n    {\n      id: 2,\n      question: 'React is mainly used for building ___.',\n      answer_a: 'Database',\n      answer_b: 'User interface',\n      answer_c: 'Design Platform',\n      answer_d: 'Conectivity',\n      correct_answer: 'b',\n    },\n    {\n      id: 3,\n      question: 'Ref is used for referring an element or component returned by ___.',\n      answer_a: 'refer()',\n      answer_b: 'reduce()',\n      answer_c: 'render()',\n      answer_d: 'react()',\n      correct_answer: 'a',\n    },\n    {\n      id: 4,\n      question: 'Which statement about Hooks is not true?',\n      answer_a: 'Hooks are completely opt-in, ther`s no need to rewrite existing code',\n      answer_b: 'Hooks are still in beta and not available yet',\n      answer_c: 'Hooks are 100% backwards-compatibile and can be used side by side with classes',\n      answer_d: 'All of the above',\n      correct_answer: 'c',\n    },\n    {\n      id: 5,\n      question: 'Which one is not a Hook?',\n      answer_a: 'useState()',\n      answer_b: 'useConst()',\n      answer_c: 'useReducer()',\n      answer_d: 'All of the above',\n      correct_answer: 'b',\n    },\n    {\n      id: 6,\n      question: 'The arbitrary inputs of components are called ___.',\n      answer_a: 'Keys',\n      answer_b: 'Components',\n      answer_c: 'Ref',\n      answer_d: 'props',\n      correct_answer: 'd',\n    },\n    {\n      id: 7,\n      question: 'What will happen if you call setState() inside render() method?',\n      answer_a: 'Repetitive output appears on the screen',\n      answer_b: 'Duplicate key error',\n      answer_c: 'Stack overflow error',\n      answer_d: 'Nothing happens',\n      correct_answer: 'c',\n    },\n    {\n      id: 8,\n      question: 'Which of the following is the correct syntax for a button click event handler foo?',\n      answer_a: '<button onclick={this.foo()}>',\n      answer_b: '<button onclick={this.foo}>',\n      answer_c: '<button onClick={this.foo()}>',\n      answer_d: '<button onClick={this.foo}>',\n      correct_answer: 'd',\n    },\n    {\n      id: 9,\n      question: 'Which of the following methods in a React Component is called after the component is rendered for the first time?',\n      answer_a: 'componentDidUpdate',\n      answer_b: 'componentDidMount',\n      answer_c: 'componentMounted',\n      answer_d: 'componentUpdated',\n      correct_answer: 'a',\n    },\n    {\n      id: 10,\n      question: 'What is used to pass data to a component from outside?',\n      answer_a: 'setStates',\n      answer_b: 'props',\n      answer_c: 'fetch',\n      answer_d: 'render with arguments',\n      correct_answer: 'b',\n    },\n  ];\n\n  const question = questions[currentQuestion];\n\n  const handleClick = e => {\n    setAnswer(e.target.value);\n    setError('');\n  };\n\n  const renderError = () => {\n    if(!error) {\n      return;\n    }\n    return <div className=\"error\">{error}</div>\n  };\n\n  const renderUserAnswer = (question, answer) => {\n    if(question.correct_answer === answer.answer) {\n      return <span className=\"correct\">Correct</span>;\n    }\n    return <span className=\"failed\">Failed</span>\n  };\n  \n\n  const renderResultData = () => {\n    return answers.map(answer => {\n      const question = questions.find(question => question.id === answer.questionId);\n      return (\n        <div key={question.id}>\n          {question.question} - {renderUserAnswer(question, answer)}\n        </div>\n      );\n    });\n  };\n\n  const restart = () => {\n    setAnswers([]);\n    setAnswer('');\n    setCurrentQuestion(0);\n    setResults(false);\n  }\n\n  const next = () => {\n    const answer = {questionId: question.id, answer: currentAnswer};\n    if(!currentAnswer) {\n      setError('Please select one option');\n      return;\n    }\n    answers.push(answer);\n    setAnswers(answers);\n    setAnswer('');\n\n    if(currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n      return;\n    }\n   \n    setResults(true);\n  }\n\n  if(showResults) {\n    return(\n      <div className=\"container results\">\n        <h2>Result:</h2>\n        <ul>{renderResultData()}</ul>\n        <button className=\"btn btn-primary\" onClick={restart}>Restart</button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"main-container\">\n        <h1>React quiz</h1>\n        <Progress \n            total={questions.length} \n            currentQuestion={currentQuestion +1}  \n        />\n        <Question \n            question={question.question}\n        />\n            {renderError()}\n        <Answers \n            question={question} \n            currentAnswer={currentAnswer} \n            handleClick={handleClick}\n        />\n        <button className=\"btn btn-primary\" \n            onClick={next}>Confirm and continue\n        </button> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}